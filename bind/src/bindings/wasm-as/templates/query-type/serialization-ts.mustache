import {
  Read,
  ReadDecoder,
  WriteSizer,
  WriteEncoder,
  Write,
  Nullable
} from "@web3api/wasm-as";
import * as Types from "..";
{{#methods}}

export class Input_{{name}} {
  {{#arguments}}
  {{name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}};
  {{/arguments}}
}

export function deserialize{{name}}Args(argsBuf: ArrayBuffer): Input_{{name}} {
  {{#arguments.length}}
  const reader = new ReadDecoder(argsBuf);
  var numFields = reader.readMapLength();

  {{#arguments}}
  {{^object}}
  var _{{name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
  {{/object}}
  {{#object}}
  {{#required}}
  var _{{name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} | null = null;
  {{/required}}
  {{^required}}
  var _{{name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
  {{/required}}
  {{/object}}
  {{#required}}
  var _{{name}}Set: bool = false;
  {{/required}}
  {{/arguments}}

  while (numFields > 0) {
    numFields--;
    const field = reader.readString();

    {{#arguments}}
    {{^first}}else {{/first}}if (field == "{{name}}") {
      {{#scalar}}
      _{{name}} = reader.read{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}();
      {{/scalar}}
      {{#array}}
      _{{name}} = reader.read{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}((reader: Read): {{#item}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/item}} => {
        {{> deserialize_array}}
      });
      {{/array}}
      {{#enum}}
      {{> deserialize_enum}}
      _{{name}} = value;
      {{/enum}}
      {{#object}}
      {{> deserialize_object}}
      _{{name}} = object;
      {{/object}}
      {{#required}}
      _{{name}}Set = true;
      {{/required}}
    }
    {{/arguments}}
  }

  {{#arguments}}
  {{#required}}
  {{^object}}
  if (!_{{name}}Set) {
  {{/object}}
  {{#object}}
  if (!_{{name}} || !_{{name}}Set) {
  {{/object}}
    throw new Error("Missing required argument: '{{name}}: {{type}}'");
  }
  {{/required}}
  {{/arguments}}
  {{/arguments.length}}

  return {
    {{#arguments}}
    {{name}}: _{{name}}{{^last}},{{/last}}
    {{/arguments}}
  };
}

export function serialize{{name}}Result(result: {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}): ArrayBuffer {
  const sizer = new WriteSizer();
  write{{name}}Result(sizer, result);
  const buffer = new ArrayBuffer(sizer.length);
  const encoder = new WriteEncoder(buffer);
  write{{name}}Result(encoder, result);
  return buffer;
}

export function write{{name}}Result(writer: Write, result: {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}): void {
  {{#return}}
  {{#scalar}}
  writer.write{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}(result);
  {{/scalar}}
  {{#array}}
  writer.write{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}(result, (writer: Write, item: {{#item}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/item}}): void => {
    {{> serialize_array}}
  });
  {{/array}}
  {{#enum}}
  {{#required}}
  writer.writeInt32(result);
  {{/required}}
  {{^required}}
  writer.writeNullableInt32(result);
  {{/required}}
  {{/enum}}
  {{#object}}
  {{#required}}
  Types.{{type}}.write(writer, result);
  {{/required}}
  {{^required}}
  if (result) {
    Types.{{type}}.write(writer, result);
  } else {
    writer.writeNil();
  }
  {{/required}}
  {{/object}}
  {{/return}}
}
{{/methods}}
